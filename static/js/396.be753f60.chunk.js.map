{"version":3,"file":"static/js/396.be753f60.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.jsx","pages/MovieDetails.jsx","services/movieSearchAPI.js"],"sourcesContent":["import { HiArrowLeft } from 'react-icons/hi';\n// import { StyledLink } from './BackLink.styled';\n\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\nexport default BackLink;\n","import { Suspense, useState, useEffect } from 'react';\nimport { NavLink, useParams, useLocation, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'services/movieSearchAPI';\nimport BackLink from 'components/BackLink';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    getMovieDetails(movieId, 'details')\n      .then(setMovieDetails)\n      .catch(console.log);\n  }, [movieId]);\n\n  if (!movieDetails) return <h2>Loading...</h2>;\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieDetails;\n\n  return (\n    <>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      <div>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={title}\n          width=\"300px\"\n          height=\"440px\"\n        />\n        <h2>{`${title} (${release_date.slice(0, 4)})`}</h2>\n        <p>User Score: {Math.round(vote_average) * 10}%</p>\n        <b>Overview</b>\n        <p>{overview}</p>\n        <b>Genres</b>\n        {genres.length === 0 ? (\n          <p>No genres</p>\n        ) : (\n          <p>Genres: {genres.map(({ name }) => name).join(', ')}</p>\n        )}\n      </div>\n      <h2>Additional Information</h2>\n      <ul>\n        <li>\n          <NavLink to=\"cast\" state={{ from: backLinkHref }}>\n            Cast\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\" state={{ from: backLinkHref }}>\n            Reviews\n          </NavLink>\n        </li>\n      </ul>\n\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTgwN2RlOWE5YjEzNTg0ZjNhNzFlNjM0M2RkYjRjZSIsInN1YiI6IjYzZDNmYjQyZjE0ZGFkMDBiZDQ4MjE4ZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.b3kkZc4VCGcVeJvumOr9cUF9SnkSJkGMQsfEBPaQeCI';\n\nexport async function getTrendingMovies() {\n  const typeRequest = {\n    trends: 'trending/movie/week',\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.trends}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getSearchMovie(searchQuery = '') {\n  const typeRequest = {\n    search: 'search/movie',\n  };\n  const options = {\n    params: {\n      query: searchQuery,\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.search}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId, type = 'details') {\n  const typeRequestById = {\n    details: `movie/${movieId}`,\n    credits: `movie/${movieId}/credits`,\n    reviews: `movie/${movieId}/reviews`,\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequestById[type]}`;\n  const response = await axios.get(url, options);\n\n  return response.data;\n}\n"],"names":["StyledLink","styled","Link","to","children","size","movieId","useParams","useState","movieDetails","setMovieDetails","backLinkHref","useLocation","state","from","useEffect","getMovieDetails","then","catch","console","log","poster_path","title","release_date","vote_average","overview","genres","src","alt","width","height","slice","Math","round","length","map","name","join","Suspense","fallback","BASE_URL","TOKEN","getTrendingMovies","typeRequest","trends","options","params","language","include_adult","headers","Authorization","url","axios","response","data","results","getSearchMovie","searchQuery","search","query","type","typeRequestById","details","credits","reviews"],"sourceRoot":""}