{"version":3,"file":"static/js/38.7afe364d.chunk.js","mappings":"mMAiBA,EAfkB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,UACE,uBAAII,OAFCD,EADC,KASjB,C,oICsCD,EAvCkB,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SACnB,OAsBE,0BACE,kBAAMA,SAAUA,EAAhB,WACE,kBACEC,KAAK,OACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,6BACE,SAAC,MAAD,UAKT,ECrBD,EA1Be,WAAO,IAAD,EACnB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAE/CC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeH,GACZI,KAAKR,GACLS,OAAM,SAAAC,GAAK,OAAIA,EAAMC,OAAV,GACf,GAAE,CAACP,IASJ,OACE,iCACE,SAAC,EAAD,CAAWZ,SATM,SAAAoB,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOrB,KAAKsB,MAE5Bb,EAD6B,KAAVW,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,IAKIf,EAAYkB,OAAS,IAAK,SAACC,EAAA,EAAD,CAAWnC,OAAQgB,MAGnD,C,+IC5BKoB,EAAW,gCACXC,EACJ,sNAEK,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,iGACCC,EAAc,CAClBC,OAAQ,uBAEJC,EAAU,CACdC,OAAQ,CACNC,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYT,GACzB,eAAgB,qBAGdU,EAdD,UAcUX,GAdV,OAcqBG,EAAYC,QAdjC,SAekBQ,EAAAA,EAAAA,IAAUD,EAAKN,GAfjC,cAeCQ,EAfD,yBAiBEA,EAASC,KAAKC,SAjBhB,kEAoBA,SAAe3B,IAAtB,4CAAO,OAAP,oBAAO,+GAA8B4B,EAA9B,+BAA4C,GAC3Cb,EAAc,CAClBc,OAAQ,gBAEJZ,EAAU,CACdC,OAAQ,CACNX,MAAOqB,EACPT,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYT,GACzB,eAAgB,qBAGdU,EAfD,UAeUX,GAfV,OAeqBG,EAAYc,QAfjC,SAgBkBL,EAAAA,EAAAA,IAAUD,EAAKN,GAhBjC,cAgBCQ,EAhBD,yBAkBEA,EAASC,KAAKC,SAlBhB,mEAqBA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAAwC7C,EAAxC,+BAA+C,UAC9C8C,EAAkB,CACtBC,QAAQ,SAAD,OAAWF,GAClBG,QAAQ,SAAD,OAAWH,EAAX,YACPI,QAAQ,SAAD,OAAWJ,EAAX,aAEHd,EAAU,CACdC,OAAQ,CACNC,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYT,GACzB,eAAgB,qBAGdU,EAhBD,UAgBUX,GAhBV,OAgBqBoB,EAAgB9C,IAhBrC,SAiBkBsC,EAAAA,EAAAA,IAAUD,EAAKN,GAjBjC,cAiBCQ,EAjBD,yBAmBEA,EAASC,MAnBX,mE","sources":["components/MovieList/MovieList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx","services/movieSearchAPI.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <p>{title}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default MovieList;\n","// import { ErrorMessage, Formik } from 'formik';\n// import { useState } from 'react';\n// import { object, string } from 'yup';\nimport { GoSearch } from 'react-icons/go';\n\n// import {\n//   SearchbarInput,\n//   SearchBox,\n//   SearchButton,\n//   SearchForm,\n// } from './SearchBar.styled';\n\n// const initialValues = { name: '' };\n// const userSchema = object({ name: string() });\n\nconst SearchBar = ({ onSubmit }) => {\n  return (\n    // <SearchBox>\n    //   <Formik\n    //     initialValues={initialValues}\n    //     onSubmit={onSubmit}\n    //     validationSchema={userSchema}\n    //   >\n    //     <SearchForm>\n    //       <SearchButton type=\"submit\">\n    //         <GoSearch />\n    //       </SearchButton>\n    //       <SearchbarInput\n    //         type=\"text\"\n    //         name=\"name\"\n    //         autoComplete=\"off\"\n    //         autoFocus\n    //         placeholder=\"Search movie\"\n    //       />\n    //       <ErrorMessage name=\"name\" />\n    //     </SearchForm>\n    //   </Formik>\n    // </SearchBox>\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button>\n          <GoSearch />\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default SearchBar;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchMovie } from 'services/movieSearchAPI';\nimport MovieList from 'components/MovieList';\nimport SearchBar from 'components/SearchBar';\n\nconst Movies = () => {\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    getSearchMovie(movieName)\n      .then(setFoundMovies)\n      .catch(error => error.message);\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const query = e.target.name.value;\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n      {foundMovies.length > 0 && <MovieList movies={foundMovies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTgwN2RlOWE5YjEzNTg0ZjNhNzFlNjM0M2RkYjRjZSIsInN1YiI6IjYzZDNmYjQyZjE0ZGFkMDBiZDQ4MjE4ZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.b3kkZc4VCGcVeJvumOr9cUF9SnkSJkGMQsfEBPaQeCI';\n\nexport async function getTrendingMovies() {\n  const typeRequest = {\n    trends: 'trending/movie/week',\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.trends}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getSearchMovie(searchQuery = '') {\n  const typeRequest = {\n    search: 'search/movie',\n  };\n  const options = {\n    params: {\n      query: searchQuery,\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.search}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId, type = 'details') {\n  const typeRequestById = {\n    details: `movie/${movieId}`,\n    credits: `movie/${movieId}/credits`,\n    reviews: `movie/${movieId}/reviews`,\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequestById[type]}`;\n  const response = await axios.get(url, options);\n\n  return response.data;\n}\n"],"names":["movies","location","useLocation","map","id","title","to","state","from","onSubmit","type","name","autoComplete","autoFocus","placeholder","useState","foundMovies","setFoundMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","getSearchMovie","then","catch","error","message","e","preventDefault","query","target","value","length","MovieList","BASE_URL","TOKEN","getTrendingMovies","typeRequest","trends","options","params","language","include_adult","headers","Authorization","url","axios","response","data","results","searchQuery","search","getMovieDetails","movieId","typeRequestById","details","credits","reviews"],"sourceRoot":""}